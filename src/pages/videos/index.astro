---
import SimplePageHeader from '../../components/SimplePageHeader.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getAllVideos } from '../../lib/video';

const videos = await getAllVideos();
---

<BaseLayout
  title='Illustrated Videos - roadmap.sh'
  description={'Graphical video demonstrations on software engineering topics.'}
  permalink={`/videos`}
>
  <SimplePageHeader title='Videos' description='Graphical video demonstrations on software engineering topics.' />

  <div class='pb-20 pt-2 bg-gray-50'>
    <div class='container'>
      <div class='mt-3 sm:my-5 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4'>
        {videos.map((video) => (
          <div class='overflow-hidden'>
            <div class='relative'>
              <a href={`#${video.id}`} class='video-link' data-video-id={video.id}>
                <div class='w-full flex items-center justify-center'>
                  <video.Content />
                <span class='absolute bottom-6 left-2 z-10 text-xs bg-gray-100 rounded-full px-2 py-1'>{video.frontmatter.duration}</span>
                </div>
              </a>
            </div>
            <div class='p-4 pt-0'>
              <h3 class='text-lg font-medium mb-1 truncate'>{video.frontmatter.title}</h3>
              <p class='text-sm text-gray-600 line-clamp-2'>{video.frontmatter.description}</p>
              <div class='mt-2 flex items-center justify-between'>
                <span class='text-xs text-gray-500'>{new Date(video.frontmatter.date).toLocaleDateString()}</span>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Video Player Section -->
      <div id="video-player" class="hidden mt-10 bg-white rounded-lg shadow-xl max-w-4xl mx-auto overflow-hidden">
        <div id="youtube-embed" class="w-full aspect-video"></div>
        <div class="p-6">
          <div id="video-content">
            <!-- Video content will be loaded here -->
          </div>
        </div>
        <button id="close-video" class="absolute top-4 right-4 text-white hover:text-gray-300 bg-gray-800 bg-opacity-50 rounded-full p-2 z-10">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ videos }}>
  // Client-side JavaScript to handle video selection and display
  document.addEventListener('DOMContentLoaded', () => {
    const videoPlayer = document.getElementById('video-player');
    const youtubeEmbed = document.getElementById('youtube-embed');
    const videoContent = document.getElementById('video-content');
    const closeBtn = document.getElementById('close-video');
    const videoLinks = document.querySelectorAll('.video-link');
    
    // Create a videos data object for client-side access
    const videosData = {};
    
    // Assuming each video has a unique ID in the YouTube platform
    // This ID would typically be part of the video data in your CMS
    const youtubeIds = {
      // This is a placeholder. In your real implementation, 
      // these IDs would come from your video data
    };
    
    // Populate the videosData object
    videos.forEach(video => {
      // Extract YouTube ID from the video object
      // This is a placeholder - you'll need to adjust based on your actual data structure
      const youtubeId = video.frontmatter.youtubeId || "dQw4w9WgXcQ"; // Default fallback video
      
      videosData[video.id] = {
        title: video.frontmatter.title,
        youtubeId: youtubeId,
        content: `<h2 class="text-2xl font-semibold mb-2">${video.frontmatter.title}</h2>
          <div class="flex items-center gap-2 mb-4">
            <span class="text-sm text-gray-500">${new Date(video.frontmatter.date).toLocaleDateString()}</span>
            <span class="text-sm bg-gray-100 rounded-full px-2 py-1">${video.frontmatter.duration}</span>
          </div>
          <p class="text-gray-700 mb-4">${video.frontmatter.description}</p>
          ${video.compiledContent ? video.compiledContent() : ''}
          <div class="mt-4 pt-4 border-t border-gray-200">
            <div class="flex items-center gap-2">
              <div class="text-sm font-medium">Author:</div>
              <div class="text-sm">${video.author ? video.author.frontmatter.name : 'Unknown'}</div>
            </div>
            ${video.frontmatter.tags && video.frontmatter.tags.length > 0 ? 
              `<div class="flex flex-wrap gap-2 mt-2">
                ${video.frontmatter.tags.map(tag => 
                  `<span class="badge bg-gray-100 text-gray-800 rounded-full px-2 py-1 text-xs">${tag}</span>`
                ).join('')}
              </div>` : ''
            }
          </div>`
      };
    });
    
    // Function to embed YouTube video
    function embedYouTubeVideo(videoId) {
      const youtubeEmbedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
      youtubeEmbed.innerHTML = `<iframe 
        src="${youtubeEmbedUrl}" 
        class="w-full h-full" 
        frameborder="0" 
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
        allowfullscreen>
      </iframe>`;
    }
    
    // Handle video link clicks
    videoLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const videoId = link.getAttribute('data-video-id');
        
        if (videosData[videoId]) {
          // Embed the YouTube video
          embedYouTubeVideo(videosData[videoId].youtubeId);
          
          // Show video info
          videoContent.innerHTML = videosData[videoId].content;
          
          // Show the player
          videoPlayer.classList.remove('hidden');
          videoPlayer.classList.add('relative');
          
          // Update URL without page reload
          history.pushState({}, '', `#${videoId}`);
          
          // Scroll to video player
          videoPlayer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
    
    // Close video player
    closeBtn.addEventListener('click', () => {
      // Remove the iframe to stop the video
      youtubeEmbed.innerHTML = '';
      
      // Hide the player
      videoPlayer.classList.add('hidden');
      videoPlayer.classList.remove('relative');
      
      // Update URL
      history.pushState({}, '', window.location.pathname);
    });
    
    // Check if URL has a hash and show that video
    if (window.location.hash) {
      const videoId = window.location.hash.substring(1);
      if (videosData[videoId]) {
        // Embed the YouTube video
        embedYouTubeVideo(videosData[videoId].youtubeId);
        
        // Show video info
        videoContent.innerHTML = videosData[videoId].content;
        
        // Show the player
        videoPlayer.classList.remove('hidden');
        videoPlayer.classList.add('relative');
        
        // Scroll to the video player
        setTimeout(() => {
          videoPlayer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }, 100);
      }
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .video-card {
    transition: transform 0.2s;
  }
  
  .video-card:hover {
    transform: translateY(-5px);
  }
  
  #video-player {
    transition: opacity 0.3s ease;
  }
  
  .badge {
    display: inline-block;
  }
  
  iframe {
    border: none;
    border-radius: 0;
    aspect-ratio: 16 / 9;
    width: 100%;
    height: 100%;
  }
</style>
